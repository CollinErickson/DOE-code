kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- kxx - kx.xx * solve()
}
pred(.5)
curve(pred(x), 0, 1)
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- kxx - kx.xx * solve(kx, kx.xx)
list(mean=mn, se=se)
}
pred(.5)
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- kxx - kx.xx * solve(kx, t(kx.xx))
list(mean=mn, se=se)
}
pred(.5)
pred <- function(xx, nug=1e-6) {browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- kxx - kx.xx * solve(kx, t(kx.xx))
list(mean=mn, se=se)
}
pred(.5)
kx
kx.xx
solve(kx, t(kx.xx))
kx.xx
kx.xx %*%solve(kx, t(kx.xx))
kxx - kx.xx %*%solve(kx, t(kx.xx))
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- kxx - kx.xx %*% solve(kx, t(kx.xx))
list(mean=mn, se=se)
}
pred(.5)
curve(pred(x)$me, 0, 1)
points(x,y,col=2)
prd <- pred(x)
curve(prd$me, 0, 1)
z <- seq(0,1,length.out = 100)
prd <- pred(z)
curve(z,prd$me, 0, 1)
plot(z,prd$me, 0, 1)
z
prd$me
plot(z,prd$me)
plot(z,prd$me, type='l')
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, 0, 1, col=2)
prd
prd$mean
dim(prd$se)
diag(prd$se)
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- diag(kxx - kx.xx %*% solve(kx, t(kx.xx)))
list(mean=mn, se=se)
}
pred(.5)
curve(pred(x)$me, 0, 1)
points(x,y,col=2)
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, 0, 1, col=2)
points(z,prd$me - prd$se, 0, 1, col=2)
points(x,y,col=3)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, 0, 1, col=2)
str(z)
prd$me + prd$se
str(prd$me + prd$se)
str(z)
str(c(prd$me + prd$se))
points(z,prd$me + prd$se, 0, 1, col=2)
points(z,c(prd$me + prd$se), 0, 1, col=2)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2)
points(z,prd$me - prd$se, col=2)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2, type='l')
points(z,prd$me - prd$se, col=2, type='l')
y <- sin(2*pi*x)+floor(4*x)
plot(x,y)
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2, type='l')
points(z,prd$me - prd$se, col=2, type='l')
points(x,y,col=3)
gauss_cor <- function(a, b, th=5) {
exp(-(a-b)^2 / th)
}
gauss_cor_mat <- function(x, x2=x) {#browser()
outer(x,x2, gauss_cor)
}
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- diag(kxx - kx.xx %*% solve(kx, t(kx.xx)))
list(mean=mn, se=se)
}
pred(.5)
curve(pred(x)$me, 0, 1)
points(x,y,col=2)
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2, type='l')
points(z,prd$me - prd$se, col=2, type='l')
points(x,y,col=3)
gauss_cor <- function(a, b, th=.05) {
exp(-(a-b)^2 / th)
}
gauss_cor_mat <- function(x, x2=x) {#browser()
outer(x,x2, gauss_cor)
}
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- diag(kxx - kx.xx %*% solve(kx, t(kx.xx)))
list(mean=mn, se=se)
}
pred(.5)
curve(pred(x)$me, 0, 1)
points(x,y,col=2)
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2, type='l')
points(z,prd$me - prd$se, col=2, type='l')
points(x,y,col=3)
pred <- function(xx, nug=1e-6) {#browser()
#covmat <- gauss_cor(c(x, xx))
kx <- gauss_cor_mat(x) + diag(nug,(length(x)))
kxx <- gauss_cor_mat(xx)
kx.xx <- gauss_cor_mat(xx, x)
mn = kx.xx %*% solve(kx, y)
se <- .1 * diag(kxx - kx.xx %*% solve(kx, t(kx.xx)))
list(mean=mn, se=se)
}
pred(.5)
curve(pred(x)$me, 0, 1)
points(x,y,col=2)
z <- seq(0,1,length.out = 200)
prd <- pred(z)
plot(z,prd$me, type='l')
points(z,prd$me + prd$se, col=2, type='l')
points(z,prd$me - prd$se, col=2, type='l')
points(x,y,col=3)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
source('LHS.R')
source("RFF_test.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=gaussian1)
a$run(2)
a$run(2)
a$run(6, plotlastonly = T)
a$run(6, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(M=200))
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(M=200))
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(M=2000))
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(M=2))
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(20, plotlastonly = T)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get())
a$run(2, plotlastonly = T)
a$run(2, plotlastonly = T)
a$run(2, plotlastonly = T)
a$run(2, plotlastonly = T)
a$run(2, plotlastonly = T)
a$run(2, plotlastonly = T)
DiceOptim::EI
install.packages(c("curl", "mgcv", "RcppArmadillo"))
dir()
source("/Users/collin/git/DOE-code/adaptconcept2_sFFLHD_RC.R")
interactive()
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
print(interactive())
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source("/Users/collin/git/DOE-code/adaptconcept2_sFFLHD_RC.R")
1280*1.25
shiny::runApp('shiny/adaptconcept2_sFFLHD_RC')
runApp('shiny/adaptconcept2_sFFLHD_RC')
runApp('shiny/adaptconcept2_sFFLHD_RC')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
source('LHS.R')
source("RFF_test.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=gaussian1)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=gaussian1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1)
a$run(2)
runApp('shiny/adaptconcept2_sFFLHD_RC')
runApp('shiny/adaptconcept2_sFFLHD_RC')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
source('LHS.R')
source("RFF_test.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1)
a$run(2)
a$run(2)
a$run(2)
a$run(2)
a$run(2)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1)
a$run(2)
a$run(2)
a$run(2)
a$run(2)
a$mod$mod[[1]]$grad_norm(runif(2))
a$mod$mod[[1]]
a$mod$grad_norm(runif(2))
contourfilled::contourfilled.func(a$mod$grad_norm)
a$run1()
a$run1()
a$run1()
a$run1()
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1)
a$run(2)
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1)
a$run(2)
a$run(2)
contourfilled::contourfilled.func(a$mod$grad_norm)
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
a$run(2)
a$run(10)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(), obj="grad")
a$run(4, plotlastonly = T)
contourfilled::contourfilled.func(a$mod$grad_norm)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
contourfilled::contourfilled.func(a$mod$grad_norm)
a$run(4, plotlastonly = T)
a$run(14, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(), obj="grad")
a$run(14, plotlastonly = T)
a$run(14, plotlastonly = T)
a$run(14, plotlastonly = T)
a$run(14, plotlastonly = T)
contourfilled::contourfilled.func(a$mod$grad_norm)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2)
install.packages("GenSA")
SMED(gaussian1, 2)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2)
SMED(gaussian1, 2, X = matrix(c(.5,.5),ncol=2,byrow=T))
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(c(.5,.5),ncol=2,byrow=T), n=3)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(c(.5,.5),ncol=2,byrow=T), n=3)
SMED(gaussian1, 2, X = matrix(c(.5,.5, .6,.6),ncol=2,byrow=T), n=3)
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=1)
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
SMED(gaussian1, 2, X = matrix(runif(50),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=1)
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
Y
ifelse(1:nrow(X) <= n0, Y > Delta, T)
ifelse(1:nrow(X) <= n0, Y > Delta, T)
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10)
system.time(SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10))
source('~/Git/SMED-Code/SMED.R')
system.time(SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10))
source('~/Git/SMED-Code/SMED.R')
system.time(SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=10))
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X = matrix(runif(10),ncol=2,byrow=T), n=5)
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5)
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=1)
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=1, Xopt=matrix(c(.5,.1),c(.5,.2),c(.5,.3),c(.5,.4),byrow=T,ncol=2))
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=1, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=1, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=4, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=4, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED_select.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED_select.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED_select.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
Xopt.inds
Xopt.selected
c()
c(c(),4)
best
Xopt.inds
c(Xopt.selected, Xopt.inds[best])
source('~/Git/SMED-Code/SMED_select.R')
SMED(gaussian1, 2, X0 = matrix(runif(10),ncol=2,byrow=T), n=5, Xopt=matrix(c(.5,.1,.5,.2,.5,.3,.5,.4),byrow=T,ncol=2))
source('~/Git/SMED-Code/SMED_select.R')
source('~/Git/SMED-Code/SMED_select.R')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
X
obj_func
SMED_select(f=obj_func,p=ncol(X),n=L, X0=X, Xopt=Xnotrun)
a$run(2)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
Xnotrun
obj_func(runif(2))
obj_func(matrix(runif(2),ncol=2))
source('~/Git/SMED-Code/SMED_select.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
SMED_select(f=obj_func,p=ncol(X),n=L, X0=X, Xopt=Xnotrun)
a$run(2)
obj_func
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
obj_func(runif(2))
obj_func
obj_func(Xnotrun)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
obj_func(runif(2))
obj_func(runif(2))
obj_func(runif(2))
obj_func(runif(2))
Xnotrun
SMED_select(f=obj_func,p=ncol(X),n=L, X0=X, Xopt=Xnotrun)
SMED_select(f=obj_func,p=ncol(X),n=8, X0=X, Xopt=Xnotrun)
points(Xnotrun)
points(Xnotrun)
contourfilled::contourfilled.func(mod$grad_norm)
points(Xnotrun)
points(X, col=2)
text(Xnotrun)
Xnotrun
contourfilled::contourfilled.func(mod$grad_norm)
text(Xnotrun)
SMED_select(f=obj_func,p=ncol(X),n=8, X0=X, Xopt=Xnotrun)
text(Xnotrun[,1],Xnotrun[,2])
contourfilled::contourfilled.func(mod$grad_norm)
text(Xnotrun[,1],Xnotrun[,2])
points(X, col=2, pch=19)
SMED_select(f=obj_func,p=ncol(X),n=9, X0=X, Xopt=Xnotrun)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad")
a$run(2)
a$run(2)
a$run(2)
a$run(2)
a$run(2)
a$run(2)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=RFF_get(), obj="grad")
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
sinumoid <- function(xx){sum(sin(2*pi*xx*3)) + 20/(1+exp(-80*(xx[[1]]-.5)))}; contourfilled.func(sinumoid)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid)
a$run(4, plotlastonly = T)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a$run(4, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid)
a$run(4, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
a$run(4, plotlastonly = T)
contourfilled::contourfilled.func(mod$grad_norm)
contourfilled::contourfilled.func(a$mod$grad_norm)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
source('~/Git/SMED-Code/SMED_select.R')
a$run(4, plotlastonly = T)
contourfilled::contourfilled.func(a$mod$grad_norm)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
