source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(1)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0, package="mlegp")
a$run(1)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
X
Z
X
X
.self$X
X
nrow(X)
Xnotrun
obj_func
obj_func(c(.5,.5))
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
X
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
a$run(2)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(20, plotlastonly = T)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(20, plotlastonly = T)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(20, plotlastonly = T)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(20, plotlastonly = T)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=sinumoid, obj="grad", n0=0)
a$run(20, plotlastonly = T)
shiny::runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
shiny::runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
runApp('shiny/adaptconcept3_sFFLHD_RC')
source('~/Git/DOE-code/sFFLHD.R')
s <- sFFLHD.seq$new(D=2,L=3)
plot(s$get.batch(),xlim=0:1,ylim=0:1,pch=19)
abline(h=(0:(s$Lb))/s$Lb,v=(0:(s$Lb))/s$Lb,col=3);points(s$get.batch(),pch=19)
abline(h=(0:(s$Lb))/s$Lb,v=(0:(s$Lb))/s$Lb,col=3);points(s$get.batch(),pch=19)
s$maximin
s <- sFFLHD.seq$new(D=2,L=3)
plot(s$get.batch(),xlim=0:1,ylim=0:1,pch=19)
abline(h=(0:(s$Lb))/s$Lb,v=(0:(s$Lb))/s$Lb,col=3);points(s$get.batch(),pch=19)
abline(h=(0:(s$Lb))/s$Lb,v=(0:(s$Lb))/s$Lb,col=3);points(s$get.batch(),pch=19)
for(i in 1:27){abline(h=(0:(s$Lb))/s$Lb,v=(0:(s$Lb))/s$Lb,col=3);points(s$get.batch(),pch=19)}
s <- sFFLHD.seq$new(D=1,L=3)
s$get.batch()
source('~/Git/DOE-code/sFFLHD.R')
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
OA3[,2:(D+1)]
str(OA3[,2:(D+1)])
OA1
OA0.5
OA1
OA2
OA3
source('~/Git/DOE-code/sFFLHD.R')
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
source('~/Git/DOE-code/sFFLHD.R')
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
G
G
str(G)
L
D
s <- sFFLHD.seq$new(D=1,L=3);s$get.batch()
A1
v
v
A1
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(contourfilled)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
a$run(4, plotlastonly = T)
source('~/Git/DOE-code/sFFLHD.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
a$run(4, plotlastonly = T)
a$run(16, plotlastonly = T)
source('~/Git/DOE-code/sFFLHD.R')
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
#gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
a$run(2)
remove.packages("contourfilled")
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
a$run(4, plotlastonly = T)
a$run(4, plotlastonly = T)
detach("package:DoE.base", unload=TRUE)
source('~/Git/DOE-code/sFFLHD.R')
s <- sFFLHD.seq$new(D=2,L=3)
plot(s$get.batch(),xlim=0:1,ylim=0:1,pch=19)
s <- sFFLHD.seq$new(D=2,L=3)
plot(s$get.batch(),xlim=0:1,ylim=0:1,pch=19)
require::DoE.base
require(DoE.base)
s <- sFFLHD.seq$new(D=2,L=3)
plot(s$get.batch(),xlim=0:1,ylim=0:1,pch=19)
frames = 50
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('0', i,'plot.png', sep='')}
x = seq(0, i, 1)
f.3 = dbinom(x, size = i, prob=.3)
f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name)
plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste(‘Binomial density with n = ‘, i), col = ‘red’)
lines(x,f.7,type='h',col='blue')
text(45, .6, 'p = .3', col='red')
text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
source('~/.active-rstudio-document')
getwd()
require(TestFunctions)
require(cf)
cf(waterfall)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
#gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
source('~/Git/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("/Users/collin/Git/SMED-Code/SMED_selectC.R")
source("../SMED/SMED-Code/SMED_selectC.R")
#gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
cf(waterfall)
cf(sinumoid)
x <- y <- seq(0,1,len=300)
z <- outer(x,y,function(a,b)sinumoid(c(a,b)))
z <- outer(x,y,Vectorize(function(a,b)sinumoid(c(a,b))))
persp(x,y,z)
persp(x,y,z, theta=30)
persp(x,y,z, theta=-30)
x <- y <- seq(0,1,len=30)
z <- outer(x,y,Vectorize(function(a,b)sinumoid(c(a,b))))
persp(x,y,z, theta=-30)
x <- y <- seq(0,1,len=50)
z <- outer(x,y,Vectorize(function(a,b)sinumoid(c(a,b))))
persp(x,y,z, theta=-30)
persp(x,y,z, theta=-30, phi=30)
persp(x,y,z, theta=-30, phi=23)
persp(x,y,z, theta=-30, phi=20)
cf(sinumoid)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
#a$run(4, plotlastonly = T)
frames = 5
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
persp()
system("dir")
system("pwd")
system("convert *.png -delay 3 -loop 0 binom.gif")
getwd()
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
#a$run(4, plotlastonly = T)
frames = 5
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('NPS_Internship/FinalPresentation/','000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('NPS_Internship/FinalPresentation/','00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('NPS_Internship/FinalPresentation/','0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
system("convert *.png -delay 3 -loop 0 binom.gif")
system("convert *.png -delay 3 -loop 0 'NPS_Internship/FinalPresentation/binom.gif")
system("convert *.png -delay 3 -loop 0 './NPS_Internship/FinalPresentation/binom.gif")
system("convert *.png -delay 3 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 3 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 30 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 5 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 500 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 1 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 1000 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 1000 -loop 3 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 1x20 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 1x2 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 100x30 -loop 0 ./NPS_Internship/FinalPresentation/binom.gif")
frames = 50
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('NPS_Internship/FinalPresentation/','000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('NPS_Internship/FinalPresentation/','00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('NPS_Internship/FinalPresentation/','0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 100x30 -loop 0 ./NPS_Internship/FinalPresentation/sinumoid.gif")
frames = 5
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('NPS_Internship/FinalPresentation/','000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('NPS_Internship/FinalPresentation/','00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('NPS_Internship/FinalPresentation/','0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name, width=1280, height=800)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
frames = 5
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('NPS_Internship/FinalPresentation/','000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('NPS_Internship/FinalPresentation/','00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('NPS_Internship/FinalPresentation/','0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name, width=960, height=600)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,g=3,func=sinumoid,  obj="grad")
#a$run(4, plotlastonly = T)
frames = 50
for(i in 1:frames){
# creating a name for each plot file with leading zeros
if (i < 10) {name = paste('NPS_Internship/FinalPresentation/','000',i,'plot.png',sep='')}
if (i < 100 && i >= 10) {name = paste('NPS_Internship/FinalPresentation/','00',i,'plot.png', sep='')}
if (i >= 100) {name = paste('NPS_Internship/FinalPresentation/','0', i,'plot.png', sep='')}
x = seq(0, i, 1)
#f.3 = dbinom(x, size = i, prob=.3)
#f.7 = dbinom(x, size = i, prob=.7)
#saves the plot as a .png file in the working directory
png(name, width=960, height=600)
#plot(x, f.3, type='h', xlim = c(0,frames), ylim = c(0,.7), ylab ='probability',   main = paste('Binomial density with n = ', i), col = 'red')
a$run(1)
#lines(x,f.7,type='h',col='blue')
#text(45, .6, 'p = .3', col='red')
#text(45, .6, 'p = .7', col='blue', pos=1)
dev.off()
}
system("convert ./NPS_Internship/FinalPresentation/*.png -delay 100x30 -loop 0 ./NPS_Internship/FinalPresentation/sinumoid.gif")
R.Version
R.Version()
source('~/Research/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('~/Research/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('~/Research/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source('~/Research/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source('~/Research/DOE-code/adaptconcept2_sFFLHD_RC.R')
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
require(TestFunctions)
source('LHS.R')
source("RFF_test.R")
source("/Users/collin/Git/SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_select.R")
source("../SMED-Code/SMED_select.R")
source("../SMED-Code/SMED_selectC.R")
#gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.01)
a <- adapt.concept2.sFFLHD.RC(D=2,L=3,func=gaussian1, obj="grad", n0=0)
a$run(2)
source('sFFLHD.R')
library("UGP")
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
source('LHS.R')
#gaussian1 <- function(xx) exp(-sum((xx-.5)^2)/2/.1)
#sinumoid <- function(xx){sum(sin(2*pi*xx*3)) + 20/(1+exp(-80*(xx[[1]]-.5)))}
library(laGP)
source("RFF_test.R")
#source("adaptconcept_sFFLHD_RC.R")
source("adaptconcept2_sFFLHD_RC.R")
source("../SMED/SMED-Code/SMED_select.R")
source("../SMED-Code/SMED_select.R")
source("../SMED/SMED-Code/SMED_selectC.R")
source("../SMED-Code/SMED_selectC.R")
try({1+1;})
try({1+1;})
try({1+1+NA;})
try({1+1+NA/0;})
try({1+1+NA/0+1/0;})
1/0
try({1+1+NA/0+1/0'd';})
1+2
install.packages("sFFLHD")
s = sFFLHD$new(D=2,L=3)
library("sFFLHD", lib.loc="~/R/x86_64-unknown-linux-gnu-library/3.1")
s = sFFLHD$new(D=2,L=3)
s <- sFFLHD$new(D=2,L=4)
sFFLHD
sFFLHD(D=2,L=3)
source('~/Research/DOE-code/compare_adaptconcept.R')
source('sFFLHD.R')
source('~/Research/DOE-code/compare_adaptconcept.R')
library(sFFLHD)
library(UGP)
source("adaptconcept_helpers.R")
require(mlegp)
require(GPfit)
require(cf)
source('LHS.R')
library(laGP)
source("adaptconcept2_sFFLHD_RC.R")
library(SMED)
library(plyr)
library(TestFunctions)
compare.adapt(func=gaussian1, D=2, L=4, g=3)
library(SMED)
library(plyr)
library(TestFunctions)
library(SMED)
library(plyr)
library(TestFunctions)
source('C:/Users/cbe117/School/DOE/Codes/DOE-code/compare_adaptconcept.R')
if (!exists('lib.loc')) {lib.loc <- NULL}
lib.loc
